# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app_website_name: '%env(WEBSITE_NAME)%'
    app_swift_mailer_sender_email: '%env(MAILER_SENDER_EMAIL)%' # admin email
    app_swift_mailer_sender_name: '%env(MAILER_SENDER_NAME)%' # admin email name

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        # setup special, global autowiring rules
        bind:

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Domain/Entity,Kernel.php,Service,Tests,Utils/Traits,Utils/Database/Migrations}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Action\:
        resource: '../src/Action'
        tags: ['controller.service_arguments']
        arguments:
            $logger: '@Symfony\Component\HttpKernel\Log\Logger'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # add form handler when calling login
    App\Action\Admin\LoginAction:
        tags: ['controller.service_arguments']
        arguments:
            $formHandler: '@App\Form\Handler\LoginHandler'

    # add form handler when renewing password
    App\Action\Admin\RenewPasswordAction:
        tags: ['controller.service_arguments']
        arguments:
            $formHandler: '@App\Form\Handler\RenewPasswordHandler'

    # add form handler when requesting new password
    App\Action\Admin\RequestNewPasswordAction:
        tags: ['controller.service_arguments']
        arguments:
            $formHandler: '@App\Form\Handler\RequestNewPasswordHandler'

    # add form handler when creating a new user account
    App\Action\Admin\RegisterAction:
        tags: ['controller.service_arguments']
        arguments:
            $formHandler: '@App\Form\Handler\RegisterHandler'

    # add logout handler
    App\Event\Handler\LogoutHandler:
        #tags: ['app.event.handler.logout_handler']

    App\Form\Handler\RequestNewPasswordHandler:
        arguments:
            $emailConfigFactory: '@App\Service\Mailer\Email\EmailConfigFactory'

    App\Form\Handler\RenewPasswordHandler:
        arguments:
            $emailConfigFactory: '@App\Service\Mailer\Email\EmailConfigFactory'

    # add authentication checker
    App\Service\Security\AuthenticationUserChecker:
        #tags: ['app.service.security.authentication_user_checker']

    # add login form guard authenticator
    App\Service\Security\LoginFormAuthenticationManager:
        #tags: ['app.service.security.login_form_authentication_manager']

    # add SwiftMailer manager
    App\Service\Mailer\SwiftMailerManager:
        #tags: ['app.service.mailer.swift_mailer_manager']

    # add EmailConfigFactory
    App\Service\Mailer\Email\EmailConfigFactory: ~
    App\Service\Mailer\Email\EmailConfigFactoryInterface: '@App\Service\Mailer\Email\EmailConfigFactory'

    # add trick video URL "proxy" checker
    App\Service\Medias\VideoURLProxyChecker:
        #tags: ['app.service.medias.video_url_proxy_checker']

    # add template engine renderer default service when calling interface: Twig
    App\Service\Templating\TwigTemplateRenderer: ~
    App\Service\Templating\TemplateRendererInterface: '@App\Service\Templating\TwigTemplateRenderer'
    App\Service\Templating\TemplateBlockRendererInterface: '@App\Service\Templating\TwigTemplateRenderer'

    # custom Twig extensions
    # add "uuid_encode" filter
    App\Utils\Templating\UuidTwigExtension:
        #tags: ['app.utils.templating.uuid_twig_extension']

    # add ResultSetMappingBuilder as a service for native queries
    Doctrine\ORM\Query\ResultSetMappingBuilder:
        #tags: ['doctrine.orm.query.result_set_mapping_builder']

    # add PSR3 logger as default logger for actions (controllers)
    Symfony\Component\HttpKernel\Log\Logger:
        #tags: ['symfony.component.http_kernel.log.logger']

    # add options resolver as a service
    Symfony\Component\OptionsResolver\OptionsResolver:
